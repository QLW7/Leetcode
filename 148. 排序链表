class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == nullptr || head->next == nullptr)
            return head;
        ListNode* midNode = findmidNode(head);
        ListNode* rightHead = midNode->next;
        midNode->next = nullptr;
        ListNode* left = sortList(head);
        ListNode* right = sortList(rightHead);
        return mergeList(left,right);
    }
    ListNode* findmidNode(ListNode* head)
    {
        if(head == nullptr || head->next == nullptr)
            return head;
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast != nullptr && fast->next != nullptr)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;

    }
    ListNode* mergeList(ListNode* l1,ListNode* l2)
    {
        ListNode* newlist = new ListNode(9986);
        ListNode* cur = newlist;
        while(l1 != nullptr && l2 != nullptr)
        {
            if(l1->val < l2->val)
            {
                cur->next = l1;
                l1 = l1->next;
            }
            else
            {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        cur->next = l1 != nullptr ? l1 :l2;
        return newlist->next;
    }
};
