class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        return mybuildTree(preorder, 0, n-1, inorder, 0, n-1);

         
    }
    int findindex(vector<int>& vec, int a)
    {
        int i;
        for(i = 0; i < vec.size(); i++)
        {
            if(vec[i] == a) return i;
        }
        return 0;
    }
    TreeNode* mybuildTree(vector<int>& preorder, int prestart, int preend, vector<int>& inorder, int instart, int inend)
    {
        if(prestart > preend)
            return NULL;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int inrootindex = findindex(inorder,preorder[prestart]);
        root->left = mybuildTree(preorder, prestart + 1, prestart + inrootindex - instart, inorder, instart, inrootindex -1);
        root->right = mybuildTree(preorder, prestart + inrootindex - instart + 1, preend, inorder, inrootindex + 1, inend);
        return root;
    }
};
