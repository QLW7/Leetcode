class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        queue<TreeNode*> q;
        string str = "";
        int qSize;
        TreeNode* tempNode;
        q.push(root);
        while(!q.empty())
        {
            qSize = q.size();
            for(int i = 0; i < qSize; i++)
            {
                tempNode =  q.front();
                q.pop();
                if(tempNode == NULL)
                    str += "null,";
                else
                {
                    str += to_string(tempNode->val);
                    str += ',';
                    q.push(tempNode->left);
                    q.push(tempNode->right);
                }
            }
        }
        return str;       
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.empty())    return NULL;
        vector<TreeNode*> vec;
        TreeNode* nodeTemp;
        string strTemp;
        int dataSize = data.size();
        int i = 0, j = 0;
        while (i < dataSize)
        {
            while (data[i] != ',')
                i++;
            strTemp = data.substr(j, i - j);
            if (strTemp == "null")   nodeTemp = NULL;
            else nodeTemp = new TreeNode(stoi(strTemp));
            vec.push_back(nodeTemp);
            i++;
            j = i;
        }
        queue<TreeNode*> q;
        q.push(vec[0]);
        TreeNode* root = vec[0];
        TreeNode* treeNodeTemp;
        int size = vec.size();
        int k = 1;
        while (k < size - 2)
        {
            treeNodeTemp = q.front();
            q.pop();
            if (treeNodeTemp)
            {
                treeNodeTemp->left = vec[k];
                q.push(vec[k]);
                k++;
                treeNodeTemp->right = vec[k];
                q.push(vec[k]);
                k++;
            }
        }
        return vec[0];
    }
};
