class Solution {
public:
    map<int,int> invec;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int vecsize = preorder.size();
        for(int i = 0; i < vecsize; i++)
        {
            invec[inorder[i]] = i;
        }
        return mybuildTree(preorder, 0, vecsize - 1, inorder, 0, vecsize - 1);
    }
    TreeNode* mybuildTree(vector<int> &preorder, int prebegin, int preend, vector<int> &inorder, int inbegin, int inend)
    {
        if(prebegin > preend)
            return NULL;
        TreeNode* root = new TreeNode(preorder[prebegin]);
        int rootnum = invec[preorder[prebegin]];
		int leftNodes = rootnum - inbegin, rightNodes = inend - rootnum;
		root->left = mybuildTree(preorder, prebegin + 1, prebegin +leftNodes, inorder, inbegin, rootnum - 1);
		root->right = mybuildTree(preorder, prebegin + leftNodes + 1, preend, inorder, rootnum + 1, inend);
        return root;
    }
    
};
